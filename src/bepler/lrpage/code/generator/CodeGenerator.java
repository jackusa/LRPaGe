package bepler.lrpage.code.generator;

import java.io.File;
import java.io.IOException;

import bepler.lrpage.grammar.Grammar;
import bepler.lrpage.parser.Symbols;

import com.sun.codemodel.JClassAlreadyExistsException;
import com.sun.codemodel.JCodeModel;
import com.sun.codemodel.JDefinedClass;
import com.sun.codemodel.JDocComment;

public class CodeGenerator {
	
	public static String NAME = "LRPaGe";
	public static String VERSION = "1.0";
	
	private static final String CLASS_HEADER_DOC = "This class was generated by the "+NAME+" parser generator v"+VERSION+
			" using the com.sun.codemodel library.\n\n<P>"
			+ NAME+" is available from https://github.com/tbepler/LRPaGe.\n<P>CodeModel is available from https://codemodel.java.net/.";
	
	private static final String EOF = "EOF";
	
	private final JCodeModel model = new JCodeModel();
	
	public CodeGenerator(String pckg, Grammar g){
		try {
			Symbols symbols = new Symbols(g, EOF);
			Framework f = new Framework(model, pckg);
			SymbolsGenerator symGen = new SymbolsGenerator(pckg, model, g, f);
			NodeGenerator nodeGen = new NodeGenerator(symbols, pckg, model, f, symGen);
			TokenFactoryGenerator tokenFac = new TokenFactoryGenerator(pckg, model, nodeGen,
					symGen, g, f);
			ParsingEngineGenerator eng = new ParsingEngineGenerator(symbols, pckg,
					model, f, nodeGen, symGen);
			
			JDefinedClass printVisitor = MainGenerator.generatePrintVisitor(
					pckg, model, nodeGen.getVisitorInterface(),
					nodeGen.getTokenNodeClasses());
			MainGenerator.generateMain(pckg, model, f, nodeGen, printVisitor, tokenFac, eng);
			
		} catch (JClassAlreadyExistsException e) {
			throw new RuntimeException(e);
		}
	}
	
	public void write(File dir) throws IOException{
		model.build(dir);
	}
	
	public static JDefinedClass appendJDocHeader(JDefinedClass clazz){
		JDocComment doc = clazz.javadoc();
		doc.append(CLASS_HEADER_DOC);
		return clazz;
	}

}
