
package bepler.lrpage.ebnf.parser;

import bepler.lrpage.ebnf.parser.nodes.AltRHS;
import bepler.lrpage.ebnf.parser.nodes.ConcatRHS;
import bepler.lrpage.ebnf.parser.nodes.EmptySymbol;
import bepler.lrpage.ebnf.parser.nodes.ErrorToken;
import bepler.lrpage.ebnf.parser.nodes.GrammarAppendBlock;
import bepler.lrpage.ebnf.parser.nodes.GrammarStartBlock;
import bepler.lrpage.ebnf.parser.nodes.IdSymbol;
import bepler.lrpage.ebnf.parser.nodes.IdentifierToken;
import bepler.lrpage.ebnf.parser.nodes.IgnoreTokenDecl;
import bepler.lrpage.ebnf.parser.nodes.LitSymbol;
import bepler.lrpage.ebnf.parser.nodes.RuleDecl;
import bepler.lrpage.ebnf.parser.nodes.RuleDeclBlock;
import bepler.lrpage.ebnf.parser.nodes.RuleDeclList;
import bepler.lrpage.ebnf.parser.nodes.RuleDeclListHead;
import bepler.lrpage.ebnf.parser.nodes.SymbolRHS;
import bepler.lrpage.ebnf.parser.nodes.TerminalStringToken;
import bepler.lrpage.ebnf.parser.nodes.TokenDecl;
import bepler.lrpage.ebnf.parser.nodes.TokenDeclBlock;
import bepler.lrpage.ebnf.parser.nodes.TokenDeclList;
import bepler.lrpage.ebnf.parser.nodes.TokenDeclListHead;


/**
 * This class was generated by the LRPaGe parser generator v1.0 using the com.sun.codemodel library.
 * 
 * <P>LRPaGe is available from https://github.com/tbepler/LRPaGe.
 * <P>CodeModel is available from https://codemodel.java.net/.
 * 
 */
public class PrintVisitor
    implements Visitor
{

    private final static String DELIM = "  ";
    private int depth = 0;

    private void print(Object obj) {
        for (int i = 0; (i<depth); i ++) {
            System.out.print(DELIM);
        }
        System.out.println(obj);
    }

    @Override
    public void visit(IdentifierToken node) {
        this.print(node);
    }

    @Override
    public void visit(TerminalStringToken node) {
        this.print(node);
    }

    @Override
    public void visit(ErrorToken node) {
        this.print(node);
    }

    @Override
    public void visit(GrammarStartBlock node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.block0 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(GrammarAppendBlock node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.grammar0 .accept(this);
        node.block1 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(TokenDeclBlock node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.tokendecllist0 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(RuleDeclBlock node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.ruledecllist0 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(TokenDeclListHead node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(TokenDeclList node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.tokendecllist0 .accept(this);
        node.tokendecl1 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(RuleDeclListHead node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.ruledecl0 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(RuleDeclList node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.ruledecllist0 .accept(this);
        node.ruledecl1 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(TokenDecl node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.identifier0 .accept(this);
        node.terminalstring1 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(IgnoreTokenDecl node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.terminalstring0 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(RuleDecl node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.identifier0 .accept(this);
        node.rhs1 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(SymbolRHS node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.symbol0 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(AltRHS node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.rhs0 .accept(this);
        node.rhs1 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(ConcatRHS node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.rhs0 .accept(this);
        node.rhs1 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(EmptySymbol node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(IdSymbol node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.identifier0 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

    @Override
    public void visit(LitSymbol node) {
        this.print(node);
        this.print("{");
        depth = (depth + 1);
        node.terminalstring0 .accept(this);
        depth = (depth- 1);
        this.print("}");
    }

}
