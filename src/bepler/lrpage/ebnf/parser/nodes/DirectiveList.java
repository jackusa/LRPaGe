
package bepler.lrpage.ebnf.parser.nodes;

import bepler.lrpage.ebnf.parser.Visitor;


/**
 * This class was generated by the LRPaGe parser generator v1.0 using the com.sun.codemodel library.
 * 
 * <P>LRPaGe is available from https://github.com/tbepler/LRPaGe.
 * <P>CodeModel is available from https://codemodel.java.net/.
 * 
 */
public class DirectiveList
    extends DirectiveListAbstractNode
{

    public final DirectiveListAbstractNode directivelist0;
    public final DirectiveAbstractNode directive1;

    public DirectiveList(DirectiveListAbstractNode directivelist0, DirectiveAbstractNode directive1) {
        this.directivelist0 = directivelist0;
        this.directive1 = directive1;
    }

    @Override
    public int getLine() {
        return directivelist0 .getLine();
    }

    @Override
    public int getPos() {
        return directivelist0 .getPos();
    }

    @Override
    public void accept(Visitor visitor) {
        visitor.visit(this);
    }

    @Override
    public int hashCode() {
        int hash = 7;
        hash = (hash*(13 + directivelist0 .hashCode()));
        hash = (hash*(13 + directive1 .hashCode()));
        return hash;
    }

    @Override
    public boolean equals(Object o) {
        if (this.equals(o)) {
            return true;
        }
        if (o.equals(null)) {
            return false;
        }
        if (!(o instanceof DirectiveList)) {
            return false;
        }
        DirectiveList castResult = ((DirectiveList) o);
        if (!this.directivelist0 .equals(castResult.directivelist0)) {
            return false;
        }
        if (!this.directive1 .equals(castResult.directive1)) {
            return false;
        }
        return true;
    }

}
